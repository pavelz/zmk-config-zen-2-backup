/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        td1rest: td1rest {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1REST";
            #binding-cells = <0>;
            bindings = <&trans>, <&sys_reset>;
        };

        td1bootloader: td1bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1BOOTLOADER";
            #binding-cells = <0>;
            bindings = <&none>, <&bootloader>;
        };

        td4layer4: td4layer4 {
            compatible = "zmk,behavior-hold-tap";
            label = "TD4LAYER4";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "hold-preferred";
        };
    };

    macros {
        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "SCREENSHOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 4 TAB  &kp Q  &kp W  &kp E  &kp R         &kp T          &kp Y        &kp U          &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D  &kp F         &kp G          &kp H        &kp J          &kp K      &kp L    &kp SEMI  &kp SQT
&td0       &kp Z  &kp X  &kp C  &kp V         &kp B          &kp N        &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &mo 1  &kp LEFT_GUI  &lt 3 SPACE    &lt 2 ENTER  &kp RIGHT_ALT  &mo 3
            >;
        };

        lower_layer {
            display-name = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1          &kp N2        &kp N3        &kp N4        &kp N5             &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp LG(BSPC)
&trans  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &none           &none         &trans        &trans        &rgb_ug RGB_EFF    &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                      &trans        &trans        &trans             &trans           &trans           &trans
            >;
        };

        raise_layer {
            display-name = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL          &kp AT             &kp HASH  &kp DLLR        &kp PRCNT          &kp CARET       &kp AMPS        &kp ASTRK     &kp LPAR         &kp RPAR       &kp BSPC
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &mkp MB3  &mkp MB1        &mkp MB2           &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp SEMICOLON  &kp NON_US_BACKSLASH
&trans  &kp EQUAL         &kp MINUS          &kp PLUS  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp LA(LEFT)    &kp LA(RIGHT)   &kp LG(LEFT)  &kp LG(RIGHT)    &kp SLASH      &kp GRAVE
                                             &trans    &trans          &trans             &trans          &trans          &trans
            >;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&trans           &kp F1        &kp F2        &kp F3  &kp F4    &kp F5            &kp F6          &kp F7    &kp F8  &kp F9  &kp F10                   &kp F11
&trans           &trans        &trans        &trans  &td1rest  &td1bootloader    &td1bootloader  &td1rest  &trans  &trans  &kp LS(LG(LC(NUMBER_4)))  &kp F12
&rgb_ug RGB_TOG  &out OUT_USB  &out OUT_BLE  &trans  &trans    &trans            &trans          &trans    &trans  &trans  &kp SCROLLLOCK            &kp PAUSE_BREAK
                                             &trans  &trans    &trans            &trans          &trans    &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp LC(C)  &kp LC(Z)  &trans        &trans          &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans        &trans          &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &kp LG(X)  &kp LG(C)     &kp LG(V)       &trans                      &trans  &trans  &trans  &trans  &trans  &trans
                              &msc SCRL_UP  &msc SCRL_DOWN  &kp LS(LG(LC(NUMBER_4)))    &trans  &trans  &trans
            >;
        };
    };
};
